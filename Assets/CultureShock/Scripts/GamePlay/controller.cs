//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CultureShock/Scripts/GamePlay/controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""controller"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""cb5d6ac7-c97d-4425-abd6-ff20fd0b5ae4"",
            ""actions"": [
                {
                    ""name"": ""lb"",
                    ""type"": ""Button"",
                    ""id"": ""508069fb-b33b-4a8d-b243-6584cf7a44ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""lt"",
                    ""type"": ""Button"",
                    ""id"": ""36169038-8ebc-4e64-b42a-5fd20913b2b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rb"",
                    ""type"": ""Button"",
                    ""id"": ""44a2e5db-8085-4246-84a4-cec7327a6068"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rt"",
                    ""type"": ""Button"",
                    ""id"": ""3ca82b41-c51c-4c14-8be9-13ad753e4cb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""x"",
                    ""type"": ""Button"",
                    ""id"": ""312bfec9-e328-43ff-a828-4b80da1e3b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d9ec299-f422-435c-883a-3c87426725e2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1840051-c580-4de9-ba65-78bfa50b7c2e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ae33f33-6cc8-4ad4-bb39-5a53d046c786"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2e731da-641d-4858-a768-5d9186e71002"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b35d73-be9a-4238-a1d2-d94ff5e0978c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""xbox"",
            ""bindingGroup"": ""xbox"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_lb = m_player.FindAction("lb", throwIfNotFound: true);
        m_player_lt = m_player.FindAction("lt", throwIfNotFound: true);
        m_player_rb = m_player.FindAction("rb", throwIfNotFound: true);
        m_player_rt = m_player.FindAction("rt", throwIfNotFound: true);
        m_player_x = m_player.FindAction("x", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_lb;
    private readonly InputAction m_player_lt;
    private readonly InputAction m_player_rb;
    private readonly InputAction m_player_rt;
    private readonly InputAction m_player_x;
    public struct PlayerActions
    {
        private @Controller m_Wrapper;
        public PlayerActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @lb => m_Wrapper.m_player_lb;
        public InputAction @lt => m_Wrapper.m_player_lt;
        public InputAction @rb => m_Wrapper.m_player_rb;
        public InputAction @rt => m_Wrapper.m_player_rt;
        public InputAction @x => m_Wrapper.m_player_x;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @lb.started += instance.OnLb;
            @lb.performed += instance.OnLb;
            @lb.canceled += instance.OnLb;
            @lt.started += instance.OnLt;
            @lt.performed += instance.OnLt;
            @lt.canceled += instance.OnLt;
            @rb.started += instance.OnRb;
            @rb.performed += instance.OnRb;
            @rb.canceled += instance.OnRb;
            @rt.started += instance.OnRt;
            @rt.performed += instance.OnRt;
            @rt.canceled += instance.OnRt;
            @x.started += instance.OnX;
            @x.performed += instance.OnX;
            @x.canceled += instance.OnX;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @lb.started -= instance.OnLb;
            @lb.performed -= instance.OnLb;
            @lb.canceled -= instance.OnLb;
            @lt.started -= instance.OnLt;
            @lt.performed -= instance.OnLt;
            @lt.canceled -= instance.OnLt;
            @rb.started -= instance.OnRb;
            @rb.performed -= instance.OnRb;
            @rb.canceled -= instance.OnRb;
            @rt.started -= instance.OnRt;
            @rt.performed -= instance.OnRt;
            @rt.canceled -= instance.OnRt;
            @x.started -= instance.OnX;
            @x.performed -= instance.OnX;
            @x.canceled -= instance.OnX;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    private int m_xboxSchemeIndex = -1;
    public InputControlScheme xboxScheme
    {
        get
        {
            if (m_xboxSchemeIndex == -1) m_xboxSchemeIndex = asset.FindControlSchemeIndex("xbox");
            return asset.controlSchemes[m_xboxSchemeIndex];
        }
    }
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnLb(InputAction.CallbackContext context);
        void OnLt(InputAction.CallbackContext context);
        void OnRb(InputAction.CallbackContext context);
        void OnRt(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
    }
}
